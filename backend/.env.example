# ========================================
# MCP Maps 3D - Backend Configuration
# ========================================
# This file contains configuration for the Express backend server.
# Copy this file to .env and fill in your actual credentials.
#
# SECURITY: Never commit .env to git! It's already in .gitignore.
#
# See API_KEYS_GUIDE.md for detailed instructions on obtaining these keys.
# ========================================

# ---------------------------------------
# Server Configuration (REQUIRED)
# ---------------------------------------
# Purpose: Port number for the Express backend server
# Default: 3003 (change if port is already in use)
# Note: Frontend connects to this port for RLP uploads and processing
#
PORT=3003

# ---------------------------------------
# Google Gemini AI (REQUIRED for PDF processing)
# ---------------------------------------
# Purpose: Processes uploaded RLP PDF documents using multimodal AI
# Get key from: https://aistudio.google.com/app/apikey
# Model used: Gemini 2.0 Flash (with PDF support)
# Format: Starts with "AIzaSy"
#
# Note: This can be the same key as the frontend, or a separate one
# Recommendation: Use separate keys for frontend/backend in production
#
GEMINI_API_KEY=your_gemini_api_key_here

# ---------------------------------------
# Apify API (OPTIONAL - for real property data scraping)
# ---------------------------------------
# Purpose: Scrapes real commercial real estate listings from LoopNet, Zillow, etc.
# Get key from: https://console.apify.com/account/integrations
# Plan: $29/month recommended for reliable scraping (includes 100 actor runs)
#
# If not configured:
#   - Falls back to Gemini with Google Search grounding
#   - May have less accurate property data
#   - No real listing images
#
# With Apify:
#   - Real property listings from major platforms
#   - Actual property images and contact information
#   - More accurate pricing and availability data
#   - Better match quality for RLP requirements
#
# Free tier: $5 free credits (good for ~10-20 searches for testing)
# Paid tier: $29/month for production use
#
APIFY_API_KEY=your_apify_api_key_here

# ---------------------------------------
# Supabase Storage (OPTIONAL - for cloud file storage)
# ---------------------------------------
# Purpose: Cloud storage for uploaded RLP PDF documents
# Get credentials from: https://supabase.com/dashboard → Project Settings → API
#
# If not configured:
#   - App will still work (files stored locally in /uploads)
#   - No cloud backup of uploaded PDFs
#   - Less scalable for production
#
# Setup storage bucket:
#   1. Set these credentials below
#   2. Run: node setup-storage.js
#   3. Bucket "rlp-documents" will be created automatically
#
# Free tier: 500MB storage (sufficient for hundreds of RLP PDFs)
#
SUPABASE_URL=your_supabase_url_here
SUPABASE_ANON_KEY=your_supabase_anon_key_here

# ---------------------------------------
# Neon Database (OPTIONAL - for persistent metadata storage)
# ---------------------------------------
# Purpose: Stores RLP document metadata (filename, requirements, status)
# Get connection string from: https://console.neon.tech → Connection Details
#
# Format:
#   postgresql://username:password@hostname.neon.tech/database?sslmode=require
#
# Example:
#   postgresql://myuser:mypass@ep-cool-name-123456.us-east-2.aws.neon.tech/neondb?sslmode=require
#
# If not configured:
#   - App will still work (in-memory storage)
#   - Data lost on server restart
#   - No query history or analytics
#
# Database schema auto-creates on first run with these tables:
#   - rlp_documents: Stores RLP metadata and extracted requirements
#   - text_chunks: For future RAG (Retrieval Augmented Generation) feature
#
# Free tier: 0.5GB storage, 100 compute hours/month
#
DATABASE_URL=your_neon_connection_string_here

# ---------------------------------------
# Development vs Production
# ---------------------------------------
# For development: All services optional (in-memory fallbacks work)
# For production: Recommended to use Supabase + Neon for persistence
#
# Example production setup:
#   1. GEMINI_API_KEY - Required (different from frontend key)
#   2. SUPABASE_URL + KEY - Recommended (cloud storage)
#   3. DATABASE_URL - Recommended (persistent metadata)
#   4. PORT - Default 3003 is fine
#
# Security best practices:
#   - Use separate credentials for dev/staging/prod
#   - Rotate keys every 3-6 months
#   - Monitor API usage dashboards
#   - See SECURITY.md for full guidelines
#
# ---------------------------------------
# Testing Your Configuration
# ---------------------------------------
# 1. Start the server:
#      npm run dev
#
# 2. Check health endpoint:
#      curl http://localhost:3003/health
#
# 3. Expected response:
#      {"status":"ok","message":"MCP Maps Backend API is running"}
#
# 4. Test RLP upload:
#      - Open frontend (http://localhost:5173)
#      - Upload a PDF file
#      - Check backend logs for processing status
#
# For help:
#   - API_KEYS_GUIDE.md - Setup instructions
#   - SECURITY.md - Security best practices
#   - MCP_SETUP_GUIDE.md - MCP server configuration
